<?php

/**
 * @file
 * Contains \Drupal\page_manager_content_type\Form\LayoutContentTypeBase.
 */

namespace Drupal\page_manager_content_type\Form;

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\Query\QueryFactory;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;

abstract class LayoutContentTypeBase extends EntityForm{
  /**
   * {@inheritdoc}
   *
   * @var \Drupal\page_manager\PageInterface
   */
  protected $entity;

  /**
   * The entity query factory.
   *
   * @var \Drupal\Core\Entity\Query\QueryFactory
   */
  protected $entityQuery;

  /**
   * Construct a new PageFormBase.
   *
   * @param \Drupal\Core\Entity\Query\QueryFactory $entity_query
   *   The entity query factory.
   */
  public function __construct(QueryFactory $entity_query) {
    $this->entityQuery = $entity_query;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('entity.query')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function form(array $form, FormStateInterface $form_state) {
    $entity_bundle = \Drupal::request()->get('entity_bundle');
    $entity_view_mode = \Drupal::request()->get('entity_view_mode');

    $form['label'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Label'),
      '#description' => $this->t('The label for this layout type.'),
      '#default_value' => $this->entity->label(),
      '#required' => TRUE,
      '#maxlength' => '255',
    ];
    $form['id'] = [
      '#type' => 'machine_name',
      '#default_value' => $this->entity->id(),
      '#disabled' => !$this->entity->isNew(),
      '#maxlength' => 64,
      '#required' => TRUE,
      //TODO: fix 'node.' if other entity type's also supported
      '#field_prefix' => 'node.' . $entity_bundle . '.' . $entity_view_mode . '.',
      '#machine_name' => [
        'exists' => [$this, 'exists'],
        'replace_pattern' => '[^a-z0-9_.]+',
      ],
    ];

    //TODO: fix 'node.' if other entity type's also supported
    $form['entity_type'] = [
      '#type' => 'value',
      '#value' => 'node',
    ];

    $form['entity_bundle'] = [
      '#type' => 'value',
      '#value' => $entity_bundle,
    ];

    $form['entity_view_mode'] = [
      '#type' => 'value',
      '#value' => $entity_view_mode,
    ];

    return parent::form($form, $form_state);
  }

  /**
   * Determines if the page entity already exists.
   *
   * @param string $id
   *   The page entity ID.
   * @param array $element
   *   form element for the field_prefix
   * @return bool
   *   TRUE if the format exists, FALSE otherwise.
   */
  public function exists($id, array $element) {
    if(!$this->entity->isNew()) {
      return FALSE;
    }

    return (bool) $this->entityQuery->get('page')
      ->condition('id', $element['#field_prefix'] . $id)
      ->execute();
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    return parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
  }



}
